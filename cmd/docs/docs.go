// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/create": {
            "post": {
                "description": "Create a new admin user in the system (requires API key)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new admin user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Admin user data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserReqModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/organisations": {
            "get": {
                "description": "Retrieve all organisations in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organisations"
                ],
                "summary": "Get all organisations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Organisation"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.InvalidAPIKeyResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new organisation in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organisations"
                ],
                "summary": "Create a new organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Organisation data",
                        "name": "organisation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Organisation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Organisation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.InvalidAPIKeyResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/organisations/{orgId}": {
            "put": {
                "description": "Update an existing organisation's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organisations"
                ],
                "summary": "Update an organisation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organisation ID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated organisation data",
                        "name": "organisation",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Organisation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Organisation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.InvalidAPIKeyResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/owner/create": {
            "post": {
                "description": "Create a new admin user in the system (requires API key)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new owner",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key",
                        "name": "X-API-Key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User data (all fields are mandatory)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserReqModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/prospects": {
            "post": {
                "description": "Create a new prospect in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prospects"
                ],
                "summary": "Create a new prospect",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organisation Id",
                        "name": "orgId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Prospect data",
                        "name": "prospect",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProspecReqtModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.ProspectModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/prospects/{id}": {
            "get": {
                "description": "Retrieve a prospect by their unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prospects"
                ],
                "summary": "Get a prospect by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prospect UID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organisation Id",
                        "name": "orgId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProspectModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/prospects/{uid}": {
            "put": {
                "description": "Update an existing prospect in the system. Update comments are generated based on differences from the earlier prospect state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Prospects"
                ],
                "summary": "Update an existing prospect",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prospect UId",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organisation Id",
                        "name": "orgId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Updated prospect data",
                        "name": "prospect",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ProspecReqtModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ProspectModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieve all users in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organisation Id",
                        "name": "orgId",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserModel"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.InvalidAuthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organisation Id",
                        "name": "orgId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User data (all fields are mandatory)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserReqModel"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.UserModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.InvalidAuthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Validate username and password, and return user details with a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.InvalidAuthResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/roles": {
            "get": {
                "description": "Retrieve all user roles for a given organisation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user roles",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.InvalidAuthResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/uid/{uId}": {
            "put": {
                "description": "Update an existing user's details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organisation Id",
                        "name": "orgId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User uId",
                        "name": "uId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data (all fields are mandatory)",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserReqModel"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.InvalidAuthResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "description": "Retrieve a user by their unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by userId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organisation Id",
                        "name": "orgId",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.UserModel"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controllers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/controllers.InvalidAuthResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/controllers.NotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/controllers.InternalErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Additional details about the error",
                    "type": "string",
                    "example": "Invalid input data"
                },
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "controllers.InternalErrorResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Additional details about the error",
                    "type": "string",
                    "example": "Server Error"
                },
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "controllers.InvalidAPIKeyResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Additional details about the error",
                    "type": "string",
                    "example": "API key is invalid"
                },
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Invalid API key"
                }
            }
        },
        "controllers.InvalidAuthResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Additional details about the error",
                    "type": "string",
                    "example": "Invalid user name or password"
                },
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Login Failed"
                }
            }
        },
        "controllers.NotFoundResponse": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Additional details about the error",
                    "type": "string",
                    "example": "No Data found for the input provided"
                },
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "No data"
                }
            }
        },
        "models.EmploymentType": {
            "type": "string",
            "enum": [
                "Employee",
                "Business"
            ],
            "x-enum-varnames": [
                "Employee",
                "Business"
            ]
        },
        "models.LoginRequest": {
            "description": "Login request payload containing username and password.",
            "type": "object",
            "required": [
                "orgId",
                "password",
                "username"
            ],
            "properties": {
                "orgId": {
                    "description": "Organization ID",
                    "type": "string",
                    "example": "123456"
                },
                "password": {
                    "description": "Password",
                    "type": "string",
                    "example": "password"
                },
                "username": {
                    "description": "Username",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "models.LoginResponse": {
            "description": "Login response payload containing user details and the generated token.",
            "type": "object",
            "properties": {
                "mobileNumber": {
                    "description": "Mobile number",
                    "type": "string",
                    "example": "9876543210"
                },
                "role": {
                    "description": "Role of the user",
                    "type": "string",
                    "example": "Admin"
                },
                "status": {
                    "description": "Status of the user",
                    "type": "string",
                    "example": "Active"
                },
                "token": {
                    "description": "Auth token",
                    "type": "string",
                    "example": "\u003cjwt_token\u003e"
                },
                "uid": {
                    "description": "User's unique ID",
                    "type": "string",
                    "example": "1"
                },
                "userId": {
                    "description": "User's unique identifier",
                    "type": "string",
                    "example": "12345"
                },
                "username": {
                    "description": "Username",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "models.Organisation": {
            "description": "Organisation model containing all organisation-related information.",
            "type": "object",
            "properties": {
                "org_id": {
                    "description": "Organisation ID",
                    "type": "string",
                    "example": "12345"
                },
                "org_name": {
                    "description": "Organisation Name",
                    "type": "string",
                    "example": "Acme Corp"
                },
                "org_uuid": {
                    "description": "Auto-generated UUID",
                    "type": "string",
                    "example": "uuid-v4"
                },
                "status": {
                    "description": "Organisation Status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.OrganisationStatus"
                        }
                    ],
                    "example": "Active"
                }
            }
        },
        "models.OrganisationStatus": {
            "type": "string",
            "enum": [
                "Created",
                "Active",
                "InActive"
            ],
            "x-enum-varnames": [
                "OrgCreated",
                "OrgActive",
                "OrgInActive"
            ]
        },
        "models.ProspecReqtModel": {
            "description": "Prospect model containing all prospect-related information.",
            "type": "object",
            "properties": {
                "age": {
                    "description": "Age of the applicant",
                    "type": "integer",
                    "example": 30
                },
                "applicant_name": {
                    "description": "Name of the applicant",
                    "type": "string",
                    "example": "John Doe"
                },
                "colleague_designation": {
                    "description": "Designation of the colleague",
                    "type": "string",
                    "example": "Team Lead"
                },
                "colleague_mobile": {
                    "description": "Mobile number of the colleague",
                    "type": "string",
                    "example": "9876543212"
                },
                "colleague_name": {
                    "description": "Name of a colleague",
                    "type": "string",
                    "example": "Mark Smith"
                },
                "emp_id": {
                    "description": "Employee ID",
                    "type": "string",
                    "example": "EMP123"
                },
                "employment_type": {
                    "description": "Employment type (\"Employee\" or \"Business\")",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.EmploymentType"
                        }
                    ],
                    "example": "Employee"
                },
                "gender": {
                    "description": "Gender of the applicant",
                    "type": "string",
                    "example": "Male"
                },
                "gross_salary": {
                    "description": "Gross salary",
                    "type": "number",
                    "example": 50000
                },
                "mobile_number": {
                    "description": "Mobile number of the applicant",
                    "type": "string",
                    "example": "9876543210"
                },
                "net_salary": {
                    "description": "Net salary",
                    "type": "number",
                    "example": 40000
                },
                "number_of_family_members": {
                    "description": "Number of family members",
                    "type": "integer",
                    "example": 4
                },
                "office_address": {
                    "description": "Office address",
                    "type": "string",
                    "example": "456 Office Street"
                },
                "previous_experience": {
                    "description": "Previous experience",
                    "type": "string",
                    "example": "5 years in sales"
                },
                "prospect_id": {
                    "description": "Unique prospect ID",
                    "type": "string",
                    "example": "P12345"
                },
                "reference_mobile": {
                    "description": "Mobile number of the reference",
                    "type": "string",
                    "example": "9876543211"
                },
                "reference_name": {
                    "description": "Reference name",
                    "type": "string",
                    "example": "Jane Doe"
                },
                "reference_relation": {
                    "description": "Relation with the reference",
                    "type": "string",
                    "example": "Sister"
                },
                "remarks": {
                    "description": "Additional remarks",
                    "type": "string",
                    "example": "Prospect is under review"
                },
                "residential_address": {
                    "description": "Residential address",
                    "type": "string",
                    "example": "123 Main Street"
                },
                "role": {
                    "description": "Role in the organization",
                    "type": "string",
                    "example": "Manager"
                },
                "status": {
                    "description": "Current status of the prospect",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProspectStatus"
                        }
                    ],
                    "example": "Pending"
                },
                "uploaded_images": {
                    "description": "Uploaded images",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"image1.jpg\"",
                        " \"image2.jpg\"]"
                    ]
                },
                "years_in_current_office": {
                    "description": "Years in the current office",
                    "type": "integer",
                    "example": 3
                },
                "years_of_stay": {
                    "description": "Years of stay at the current address",
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "models.ProspectModel": {
            "description": "Prospect model containing all prospect-related information.",
            "type": "object",
            "properties": {
                "age": {
                    "description": "Age of the applicant",
                    "type": "integer",
                    "example": 30
                },
                "applicant_name": {
                    "description": "Name of the applicant",
                    "type": "string",
                    "example": "John Doe"
                },
                "colleague_designation": {
                    "description": "Designation of the colleague",
                    "type": "string",
                    "example": "Team Lead"
                },
                "colleague_mobile": {
                    "description": "Mobile number of the colleague",
                    "type": "string",
                    "example": "9876543212"
                },
                "colleague_name": {
                    "description": "Name of a colleague",
                    "type": "string",
                    "example": "Mark Smith"
                },
                "created_by": {
                    "description": "User who created the prospect",
                    "type": "string",
                    "example": "admin"
                },
                "created_time": {
                    "description": "Time when the prospect was created",
                    "type": "string",
                    "example": "2023-04-12T15:04:05Z"
                },
                "emp_id": {
                    "description": "Employee ID",
                    "type": "string",
                    "example": "EMP123"
                },
                "employment_type": {
                    "description": "Employment type (\"Employee\" or \"Business\")",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.EmploymentType"
                        }
                    ],
                    "example": "Employee"
                },
                "gender": {
                    "description": "Gender of the applicant",
                    "type": "string",
                    "example": "Male"
                },
                "gross_salary": {
                    "description": "Gross salary",
                    "type": "number",
                    "example": 50000
                },
                "mobile_number": {
                    "description": "Mobile number of the applicant",
                    "type": "string",
                    "example": "9876543210"
                },
                "net_salary": {
                    "description": "Net salary",
                    "type": "number",
                    "example": 40000
                },
                "number_of_family_members": {
                    "description": "Number of family members",
                    "type": "integer",
                    "example": 4
                },
                "office_address": {
                    "description": "Office address",
                    "type": "string",
                    "example": "456 Office Street"
                },
                "previous_experience": {
                    "description": "Previous experience",
                    "type": "string",
                    "example": "5 years in sales"
                },
                "prospect_id": {
                    "description": "Unique prospect ID",
                    "type": "string",
                    "example": "P12345"
                },
                "reference_mobile": {
                    "description": "Mobile number of the reference",
                    "type": "string",
                    "example": "9876543211"
                },
                "reference_name": {
                    "description": "Reference name",
                    "type": "string",
                    "example": "Jane Doe"
                },
                "reference_relation": {
                    "description": "Relation with the reference",
                    "type": "string",
                    "example": "Sister"
                },
                "remarks": {
                    "description": "Additional remarks",
                    "type": "string",
                    "example": "Prospect is under review"
                },
                "residential_address": {
                    "description": "Residential address",
                    "type": "string",
                    "example": "123 Main Street"
                },
                "role": {
                    "description": "Role in the organization",
                    "type": "string",
                    "example": "Manager"
                },
                "status": {
                    "description": "Current status of the prospect",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.ProspectStatus"
                        }
                    ],
                    "example": "Pending"
                },
                "uid": {
                    "description": "unique identifier for the prospect",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174111"
                },
                "update_history": {
                    "description": "Comments about the last update",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UpdateHistory"
                    }
                },
                "updated_by": {
                    "description": "User who last updated the prospect",
                    "type": "string",
                    "example": "admin"
                },
                "updated_time": {
                    "description": "Time when the prospect was last updated",
                    "type": "string",
                    "example": "2023-04-12T15:04:05Z"
                },
                "uploaded_images": {
                    "description": "Uploaded images",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"image1.jpg\"",
                        " \"image2.jpg\"]"
                    ]
                },
                "years_in_current_office": {
                    "description": "Years in the current office",
                    "type": "integer",
                    "example": 3
                },
                "years_of_stay": {
                    "description": "Years of stay at the current address",
                    "type": "integer",
                    "example": 5
                }
            }
        },
        "models.ProspectStatus": {
            "type": "string",
            "enum": [
                "Pending",
                "OnVisit",
                "Progress",
                "Approved",
                "Rejected",
                "UnderReview",
                "Completed",
                "Submitted",
                "Cancelled",
                "RePending",
                "Postponed"
            ],
            "x-enum-varnames": [
                "Pending",
                "OnVisit",
                "Progressve",
                "Approved",
                "Rejected",
                "UnderReview",
                "Completed",
                "Submitted",
                "Cancelled",
                "RePending",
                "Postponed"
            ]
        },
        "models.Role": {
            "type": "string",
            "enum": [
                "Admin",
                "Operations Lead",
                "Field Lead",
                "Field Executive",
                "Owner",
                "Operations Executive"
            ],
            "x-enum-varnames": [
                "Admin",
                "OperationsLead",
                "FieldLead",
                "FieldExecutive",
                "Owner",
                "OperationsExecutive"
            ]
        },
        "models.UpdateHistory": {
            "description": "History of updates made to a user.",
            "type": "object",
            "properties": {
                "update_by": {
                    "description": "User who made the update",
                    "type": "string",
                    "example": "admin"
                },
                "updated_comments": {
                    "description": "Comments about the update",
                    "type": "string",
                    "example": "Updated user role"
                },
                "updated_time": {
                    "description": "Time of the update",
                    "type": "string",
                    "example": "2023-04-12T15:04:05Z"
                }
            }
        },
        "models.UserModel": {
            "description": "User model containing all user-related information.",
            "type": "object",
            "properties": {
                "created_time": {
                    "description": "Time when the user was created",
                    "type": "string",
                    "example": "2023-04-12T15:04:05Z"
                },
                "mobile_number": {
                    "description": "Mobile number of the user",
                    "type": "string",
                    "example": "9876543210"
                },
                "org_status": {
                    "description": "Organization ID",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.OrganisationStatus"
                        }
                    ],
                    "example": "123456"
                },
                "org_uuid": {
                    "description": "UUID of the organization",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "password": {
                    "description": "Hashed password",
                    "type": "string",
                    "example": "plane_password"
                },
                "remarks": {
                    "description": "Additional remarks about the user",
                    "type": "string",
                    "example": "User is active and verified"
                },
                "role": {
                    "description": "Role of the user",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Role"
                        }
                    ],
                    "example": "Admin"
                },
                "status": {
                    "description": "Status of the user",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserStatus"
                        }
                    ],
                    "example": "Active"
                },
                "uid": {
                    "description": "Auto-incremented unique identifier",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174111"
                },
                "update_history": {
                    "description": "History of updates",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UpdateHistory"
                    }
                },
                "updated_time": {
                    "description": "Time when the user was last updated",
                    "type": "string",
                    "example": "2023-04-12T15:04:05Z"
                },
                "userid": {
                    "description": "Unique identifier for the user",
                    "type": "string",
                    "example": "112345"
                },
                "username": {
                    "description": "Username of the user",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "models.UserReqModel": {
            "type": "object",
            "required": [
                "created_time",
                "mobile_number",
                "org_status",
                "org_uuid",
                "password",
                "remarks",
                "role",
                "status",
                "update_history",
                "updated_time",
                "userid",
                "username"
            ],
            "properties": {
                "created_time": {
                    "description": "Time when the user was created",
                    "type": "string",
                    "example": "2023-04-12T15:04:05Z"
                },
                "mobile_number": {
                    "description": "Mobile number of the user",
                    "type": "string",
                    "example": "9876543210"
                },
                "org_status": {
                    "description": "Organization ID",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.OrganisationStatus"
                        }
                    ],
                    "example": "123456"
                },
                "org_uuid": {
                    "description": "UUID of the organization",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "password": {
                    "description": "Hashed password",
                    "type": "string",
                    "example": "plane_password"
                },
                "remarks": {
                    "description": "Additional remarks about the user",
                    "type": "string",
                    "example": "User is active and verified"
                },
                "role": {
                    "description": "Role of the user",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Role"
                        }
                    ],
                    "example": "Admin"
                },
                "status": {
                    "description": "Status of the user",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.UserStatus"
                        }
                    ],
                    "example": "Active"
                },
                "update_history": {
                    "description": "History of updates",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UpdateHistory"
                    }
                },
                "updated_time": {
                    "description": "Time when the user was last updated",
                    "type": "string",
                    "example": "2023-04-12T15:04:05Z"
                },
                "userid": {
                    "description": "Unique identifier for the user",
                    "type": "string",
                    "example": "112345"
                },
                "username": {
                    "description": "Username of the user",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "models.UserStatus": {
            "type": "string",
            "enum": [
                "Created",
                "Confirmed",
                "Verified",
                "Active",
                "Inactive",
                "Disabled",
                "Banned"
            ],
            "x-enum-varnames": [
                "Created",
                "Confirmed",
                "Verified",
                "Active",
                "InActive",
                "Disabled",
                "Banned"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "FVerify API",
	Description:      "This is the API documentation for the Fverify backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
